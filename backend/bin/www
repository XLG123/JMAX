var app = require("../app");
var debug = require("debug")("JMAX:server");
const Message = require("../models/Message");
var http = require("http");
const mongoose = require("mongoose");
const { mongoURI: db } = require("../config/keys.js");

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

var server = http.createServer(app);
const io = require("socket.io")(server, {
  cors: {
    origin: "https://jmax.onrender.com/",
    methods: ["GET", "POST"],
  },
});

// connection to socket.io
io.on("connection", (socket) => {
  console.log("a user connected through sockets");
  socket.on("chat message", (msg) => {
    io.emit("chat message", msg);
  });
  socket.on("register user", (userId) => {
    socket.join(userId);
  })
  socket.on("private message", (msg) => {
    if (!msg.content || !msg.sender || !msg.receiver) {
      console.error("Missing required fields in message:", msg);
      return;
    }

    const message = new Message({
      sender: msg.sender,
      receiver: msg.receiver,
      content: msg.content,
    });

    message
      .save()
      .then(() => {
        // Emit the message to the sender and receiver only
        io.to(msg.sender).emit("private message", msg);
        io.to(msg.receiver).emit("private message", msg);
      })
      .catch((err) => {
        console.error("Error saving message:", err);
      });
  });

  socket.on("typing", () => {
    socket.broadcast.emit("typing");
  });

  socket.on("stop typing", () => {
    socket.broadcast.emit("stop typing");
  });

  socket.on("disconnect", () => {
    console.log("user disconnected");
    socket.leaveAll();
  });
});

mongoose
  .connect(db, { useNewUrlParser: true })
  .then(() => {
    // Use `debug` instead of `dbLogger` if you did not split the debug
    // console into `dbLogger` and `serverLogger` above.
    debug("Connected to MongoDB successfully");
    server.listen(port);
  })
  // Use `debug` instead of `serverLogger` if you did not split the debug
  // console into `dbLogger` and `serverLogger` above.
  .catch((err) => debug(err));
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
